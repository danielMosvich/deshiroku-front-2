---
import Layout from "../layouts/Layout.astro";
import Button from "../components/global-react/button";
---

<Layout title="deshiroku">
  <div class="bouncing-blobs-container">
    <div class="bouncing-blobs-glass"></div>
    <div class="bouncing-blobs">
      <div class="bouncing-blob bouncing-blob--blue"></div>
      <div class="bouncing-blob bouncing-blob--blue"></div>
      <div class="bouncing-blob bouncing-blob--blue"></div>
      <div class="bouncing-blob bouncing-blob--white"></div>
      <div class="bouncing-blob bouncing-blob--purple"></div>
      <div class="bouncing-blob bouncing-blob--purple"></div>
      <div class="bouncing-blob bouncing-blob--pink"></div>
    </div>
  </div>
  <main
    style="height: calc(100vh - 56px);"
    class="flex flex-col items-center justify-center"
  >
    <div class="stack relative">
      <div class="blobs">
        <span class="blob"></span>
        <span class="blob"></span>
        <span class="blob"></span>
        <span class="blob"></span>
      </div>
    </div>
    <h2
      class="text-5xl font-extrabold mt-3 dark:text-blue-50/90 text-black/80"
    >
      DESHIROKU
    </h2>
    <p
      class="text-normal text-center max-w-[90%] mt-4 text-black/70 font-semibold font-ui dark:text-sky-50/70"
    >
      We invite you to register and if you already have an account Log in, so
      you can save your images in a collection.
    </p>
    <div class="flex gap-3 mt-5">
      <Button href="/register" client:load variant="solid" text="register" />
      <Button href="/login" client:load text="login" />
      <!-- <Button client:load variant="solid" text="register" active ></Button>
      <Button client:load text="login" active></Button> -->
    </div>
  </main>

  <footer
    class="dark:bg-black/30 bg-white/30 dark:text-white/30 text-neutral-400 bottom-0 py-2"
  >
    <div class="flex px-4">
      <p class="text-xs">
        We do not require an email for security reasons, since this is a small
        project, only a username and password are required.
      </p>
    </div>
  </footer>
</Layout>
<style>
  :root {
    font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
    line-height: 1.5;
    font-weight: 400;

    color: black;
    background-color: white;

    font-synthesis: none;
    text-rendering: optimizeLegibility;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    /* opacity: 0.2; */
  }

  .bouncing-blob {
    opacity: 0.4;
    width: 32vw;
    aspect-ratio: 1;
    border-radius: 50%;
    will-change: transform;
    position: absolute;
    z-index: 1;
    top: 0;
    left: 0;
    transform-origin: left top;
  }

  .bouncing-blob--blue {
    background: #4783c7;
  }

  .bouncing-blob--white {
    background: #ffffff;
    z-index: 2;
    width: 15vw;
  }

  .bouncing-blob--purple {
    background: #8c8ff1;
  }

  .bouncing-blob--pink {
    background: #e289cd50;
  }

  .bouncing-blobs-container {
    position: fixed;
    z-index: -1;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }

  .bouncing-blobs-glass {
    position: absolute;
    z-index: 2;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    backdrop-filter: blur(140px);
    -webkit-backdrop-filter: blur(140px);
    pointer-events: none;
  }

  .bouncing-blobs {
    position: absolute;
    z-index: 1;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }

  @media (max-width: 1200px) {
    .bouncing-blobs-glass {
      backdrop-filter: blur(120px);
      -webkit-backdrop-filter: blur(120px);
    }
  }

  @media (max-width: 500px) {
    .bouncing-blob {
      width: 60vw;
    }
    .bouncing-blob--white {
      width: 30vw;
    }
    .bouncing-blobs-glass {
      backdrop-filter: blur(90px);
      -webkit-backdrop-filter: blur(90px);
    }
  }
  @media (prefers-color-scheme: dark) {
    :root {
      background-color: rgb(0, 0, 0);
    }
    .bouncing-blob {
      opacity: 0.15;
    }
  }
</style>
<script is:inline>
  const MIN_SPEED = 0.1;
  const MAX_SPEED = 1.0;

  function randomNumber(min, max) {
    return Math.random() * (max - min) + min;
  }

  class Blob {
    constructor(el) {
      this.el = el;
      const boundingRect = this.el.getBoundingClientRect();
      this.size = boundingRect.width;
      this.initialX = randomNumber(0, window.innerWidth - this.size);
      this.initialY = randomNumber(0, window.innerHeight - this.size);
      this.el.style.top = `${this.initialY}px`;
      this.el.style.left = `${this.initialX}px`;
      this.vx =
        randomNumber(MIN_SPEED, MAX_SPEED) * (Math.random() > 0.5 ? 1 : -1);
      this.vy =
        randomNumber(MIN_SPEED, MAX_SPEED) * (Math.random() > 0.5 ? 1 : -1);
      this.x = this.initialX;
      this.y = this.initialY;
    }

    update() {
      this.x += this.vx;
      this.y += this.vy;
      if (this.x >= window.innerWidth - this.size) {
        this.x = window.innerWidth - this.size;
        this.vx *= -1;
      }
      if (this.y >= window.innerHeight - this.size) {
        this.y = window.innerHeight - this.size;
        this.vy *= -1;
      }
      if (this.x <= 0) {
        this.x = 0;
        this.vx *= -1;
      }
      if (this.y <= 0) {
        this.y = 0;
        this.vy *= -1;
      }
    }

    move() {
      this.el.style.transform = `translate(${this.x - this.initialX}px, ${
        this.y - this.initialY
      }px)`;
    }
  }

  function initBlobs() {
    const blobEls = document.querySelectorAll(".bouncing-blob");
    const blobs = Array.from(blobEls).map((blobEl) => new Blob(blobEl));

    function update() {
      requestAnimationFrame(update);
      blobs.forEach((blob) => {
        blob.update();
        blob.move();
      });
    }

    requestAnimationFrame(update);
  }

  initBlobs();
</script>
